Call Back
==================
=================


<button>Click here</button>
<h1>...</h1>

const div=document.querySelector("h1")
const button=document.querySelector("button")

const setText=(text)=>{
 div.textContent=text
}

const checkAuth=(cb)=>{
  setText('Checking Auth...')
  setTimeout(()=>{cb(true)},2000)
}


const fetchUser=cb=>{
  setText('Fetching User...')
  setTimeout(()=>{cb({name:"Max"})},2000)
}

//a is arg of cb which is anonymous, which a=true in 2000 milsec
//b is arg of cb which is anonymous, which b={name:"Max"} in 2000 milsec 
button.addEventListener("click",()=>{
  checkAuth((a)=>{
    if(a){fetchUser((b)=>{
          setText(b.name)
        })
    }
  })
})
//================================
@0 = ...
@click = Checking Auth...
@2000 =  checkAuth(true)
         Fetching User...
@4000 =  <h1>Max<h1>


//==========================================
Promise

const checkAuth=()=>{
  return new Promise((resolve,reject)=>{ //object that have rosolve and reject function
   
     setText('Checking Auth...')
     setTimeout(()=>{
        resolve(true) // to return some value after 2000 we can use this value after that
     },2000)
     
  })
}

const fetchUser=()=>{
 return new Promise((resolve,reject)=>{  //object that have rosolve and reject function
   
   setText('Fetching User...')
   setTimeout(()=>{
        resolve({name:"Max"})  // to return some value after 2000 we can use this value after that
   },2000)
   
 })
}

//======================================
button.addEventListener("click",()=>{
  checkAuth()
  .then(a=>{return fetchUser()})
  .then(b=>{setText(b.name)})            
  
})

//==========================

@0 = ...
@click = Checking Auth...
@2000 =  Fetching User...
@4000 =  <h1>Max<h1>

//==========================
//==========================
async await

//===========================
const checkAuth=()=>{
  return new Promise((resolve,reject)=>{ //object that have rosolve and reject function
   
     setText('Checking Auth...')
     setTimeout(()=>{
        resolve(true) // to return some value after 2000 we can use this value after that
     },2000)
     
  }
}

const fetchUser=()=>{
 return new Promise((resolve,reject)=>{  //object that have rosolve and reject function
   
   setText('Fetching User...')
   setTimeout(()=>{
        resolve({name:"Max"})  // to return some value after 2000 we can use this value after that
   },2000)
   
 }
}
//================================
button.addEventListener("click",async()=>{   //This is async function
  const isAuth=await checkAuth()  // please wait for checkAuth to return a value
  let user=null
  if(isAuth){                        
    user=await fetchUser()        //please wait for fetchUser to return a value
  }
  setText(user.name)         
})







